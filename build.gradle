plugins {
    id "com.modrinth.minotaur" version "2.+"
    id("net.minecraftforge.gradle") version("${fg_plugin_version}")
    id("org.spongepowered.mixin") version("${mixin_plugin_version}")
    id("eclipse")
    id("idea")
    id("maven-publish")
}

repositories {
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.2.5'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

version = mod_version
group = 'xyz.nikgub.incandescent'
archivesBaseName = mod_id
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=${mod_id}.mixins.json"

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }

        client {
            args '--username', "nikgub"
            property 'forge.enabledGameTestNamespaces',  mod_id
        }
        server {
            property 'forge.enabledGameTestNamespaces',  mod_id
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces',  mod_id
        }

        data {
            args '--mod',  mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}


sourceSets.main.resources {
    srcDir 'src/generated/resources'
    ext.refMap = 'main.refmap.json'
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
    debug.export = true
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
            mappings_channel: mappings_channel, mappings_version: mappings_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : mod_version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_id}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

modrinth {
    token = System.getenv('MODRINTH_TOKEN')
    projectId = "incandescent-lib"
    versionNumber = mod_id
    versionType = "release"
    uploadFile = jar
    gameVersions = ["1.20.1"]
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}